{"name":"Te.js","tagline":"Simple library to work with HTML5 templates","body":"## te.js\r\n\r\nSimple Javascript library used to work with HTML5 templates \r\n(see [W3C Specification](http://www.w3.org/TR/html5/scripting-1.html#the-template-element)) \r\n \r\n## Examples: \r\n  \r\nThere is the template that contains properties of simple model: \r\n    \r\n    <template id=\"templatemodel\">\r\n      <img id=\"imgmodel\" alt=\"{{altvalue}}\" src=\"{{srcvalue}}\" /> \r\n      <div id=\"divmodel\" class=\"commentmodel\">{{textvalue}}</div> \r\n    </template> \r\n\r\nTo activate it use the following syntax: \r\n \r\n    te(\r\n      'body',\r\n      '#templatemodel',\r\n      {'altvalue':'Cool image', 'srcvalue':'2.png', 'textvalue':'Hello, World!'}\r\n      ); \r\n    => \r\n    <body> \r\n    <template id=\"templatemodel\">\r\n      <img id=\"imgmodel\" alt=\"Cool image\" src=\"2.png\" /> \r\n      <div id=\"divmodel\" class=\"commentmodel\">Hello, World!</div> \r\n    </template>  \r\n    </body>\r\n\r\n* 'body' - CSS-selector of the DOM element to which the template will be appended\r\n* '#templatemodel' - CSS-selector of the template\r\n* options object - {'placeholder-name':'value'}\r\n\r\nActivation means that placeholders are filled with provided values and\r\nwhole template is appended to existing DOM element (\"template\" element itself\r\nis ommited from resulting markup).\r\n\r\nThe one is also able to initialize the template without activation: \r\n\r\n    te.init(\r\n      '#templatemodel',\r\n      {'altvalue':'Cool image', 'srcvalue':'2.png', 'textvalue':'Hello, World!'}\r\n      ); \r\n    te('body', '#templatemodel');\r\n\r\nHaving another example that just has empty attributes and node values: \r\n\r\n    <template id=\"mytemplate\">      \r\n      <img src=\"\" alt=\"great image /> \r\n      <div class=\"comment\"></div> \r\n    </template> \r\n \r\nTo activate it you need to provide an array of options in the following format:\r\n\r\n    te(\r\n      'body',\r\n      '#mytemplate',\r\n      [{'s':'img','a':'src','v':'1.png'},{'s':'.comment','a':'innerHTML','v':'Hello, World!'}]\r\n      ); \r\n    => \r\n    <body> \r\n    <template id=\"mytemplate\"> \r\n      <img id=\"myimg\" src=\"1.png\" alt=\"great image\"> \r\n      <div id=\"mydiv\" class=\"comment\">Hello, World!</div> \r\n    </template> \r\n    </body>\r\n\r\n* {'s':'CSS-selector of element', 'a':'attribute name', 'v':'value'}\r\n* To add child element use 'innerHTML' value for 'a' key \r\n\r\nThe approach with initialization/activation is also supported: \r\n \r\n    te.init('#mytemplate', [{'s':'img','a':'src','v':'1.png'}]); \r\n    te.init('#mytemplate', [{'s':'.comment','a':'innerHTML','v':'Hello, World!'}]);\r\n\r\nAfter that you can activate the initialized template:\r\n    \r\n    te('body', '#mytemplate');\r\n\r\nFinally the one could create the template that contains model values and initialize it using \r\ntwo different types of the attributes: \r\n\r\n    <template id=\"templatemixed\">\r\n      <img id=\"imgmixed\" alt=\"{{altvalue}}\" src=\"\" /> \r\n      <div id=\"divmixed\" class=\"commentmixed\"></div> \r\n    </template> \r\n\r\n    te.init('#templatemixed', {'altvalue':'Cool image'}); \r\n    te.init('#templatemixed', [{ 's': '#imgmixed', 'a': 'src', 'v': '2.png' }]); \r\n    te.init('#templatemixed', [{ 's': '.commentmixed', 'a': 'innerHTML', 'v': 'Hello, World!' }]); \r\n\r\n    te('body', '#templatemixed'); \r\n    => \r\n    <body> \r\n    <template id=\"templatemixed\">\r\n      <img id=\"imgmixed\" alt=\"Cool image\" src=\"2.png\" /> \r\n      <div id=\"divmixed\" class=\"commentmixed\">Hello, World!</div> \r\n    </template>  \r\n    </body> \r\n\r\nInspired by [HTML's New Template Tag](http://www.html5rocks.com/en/tutorials/webcomponents/template/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}